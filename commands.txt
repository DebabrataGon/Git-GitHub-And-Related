git --version 
cd /  (change directory//reach root)
git clone https://github.com/DebabrataGon/Git-GitHub-And-Related.git  (clone/download a folder)
cd Git-GitHub-And-Related  (enter a directory/folder)
touch README.md (?//create or access a file)

git add . (add to staging area new and modified files of work directory)
git config user.email "debabratagon33779@gmail.com" (individual repo)
git config user.name "Debabrata Gon" (individual repo)
git config --global user.email "debabratagon33779@gmail.com"
git config --global user.name "Debabrata Gon"
git commit -m "first commit" (store in Git repo history)
git remote add origin https://github.com/DebabrataGon/Git-GitHub-And-Related.git (add remote repo connected to the url's repo)
git remote -v (list the remote repositories that are associated with your local Git repository v=verbose)
git push -u origin master (push head of master branch of origin repo from git in github u=upstream)

git pull origin main (pull head of main branch of origin repo from git in local repo)
git push -u origin master

git pull --rebase origin main (if normal push don't work use these 2 lines before it)
git push -u origin main

git push -u <repo-name> <branch-name>

git init (initializing the current working directoryas git repo)
git add folder
git add -A (add to staging area new,modified,deleted files files of work directory)
git add -u (add to staging area old/modified/tracked and deleted files of work directory in staging area)
git add --update (")
git commit -a -m "first commit"  (add modified and deleted files in staging area and store in Git repo history)
git commit -am "first commit"    (")

git remote set-url <local repo name/origin> <...link...>    (rename Git repo)

git status (list  files in staging area)
git status -s (short status)

git log (commits in current branch)
git log -p -5 (recent 5 commits)

git rm --catched waste.html (remove file from staging area)
git rm -f first.txt (remove file forcefully)
git rm -rf folder (r=recursively , not just delete the folder but also folders in it and so on)

git checkout -b <new branch name>   (create a new branch and enter it)
git branch <branch name> (create a new branch but do not enter it)

git checkout <commit-hash> (create a detached head from that particular node)
git checkout <branch name>  (name and enter branch <branch name>)

git checkout master (go to master branch)
git branch -M Master  (rename current branch to master) 
git branch -a (show all branches)
git branch -d bugs (delete bugs branch)
git merge dev (merge dev in current branch)

git revert <commit-hash> (revert a commit)  (undoes the changes introduced by a specific commit)
git revert HEAD (revert last commit)
git reset --hard HEAD~1 (undo last commit) (move the branch pointer to a different commit)
git reset --hard HEAD~2 (undo 2nd last commit)
git reset --soft <commit-hash> (only change in Git repo)
git reset --mixed <commit-hash> (only change in Git repo,staging area)
git reset --hard <commit-hash>  (change in Git repo,staging area,working directory)

git push <remote-name> <branch1-name> <branch2-name> ... <branchN-name> (push multiple braches aat a time)
git push <remote-name> --all (push all braches aat a time)

----------------------------------------------------------------------------------------

mkdir folder (make directory on the current folder)
cd folder
cd ... (1 level up)
ls (list files in working directory)
clear

--------------------------------------------------------------------------------------------------

//create repo in github,clone

//add,config,commit,remote add,push
//first time

//add,commit,push
//other times

//create folder in local device,init,create repo in github,push // empty folder 

//create folder in local device,add content in folder,init,add,config,commit,create repo in github,remote add,push
//folder with contents

